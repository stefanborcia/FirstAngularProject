{"ast":null,"code":"import { HttpResponse } from '@angular/common/http';\nimport { BaseService } from '../base-service';\nimport { RequestBuilder } from '../request-builder';\nimport { map, filter } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../api-configuration\";\nimport * as i2 from \"@angular/common/http\";\nexport class FlightService extends BaseService {\n  constructor(config, http) {\n    super(config, http);\n  }\n  /**\r\n   * Path part for operation searchFlight\r\n   */\n\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `searchFlight$Plain()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\n  searchFlight$Plain$Response(params, context) {\n    const rb = new RequestBuilder(this.rootUrl, FlightService.SearchFlightPath, 'get');\n    if (params) {}\n    return this.http.request(rb.build({\n      responseType: 'text',\n      accept: 'text/plain',\n      context: context\n    })).pipe(filter(r => r instanceof HttpResponse), map(r => {\n      return r;\n    }));\n  }\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `searchFlight$Plain$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\n  searchFlight$Plain(params, context) {\n    return this.searchFlight$Plain$Response(params, context).pipe(map(r => r.body));\n  }\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `searchFlight()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\n  searchFlight$Response(params, context) {\n    const rb = new RequestBuilder(this.rootUrl, FlightService.SearchFlightPath, 'get');\n    if (params) {}\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'text/json',\n      context: context\n    })).pipe(filter(r => r instanceof HttpResponse), map(r => {\n      return r;\n    }));\n  }\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `searchFlight$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\n  searchFlight(params, context) {\n    return this.searchFlight$Response(params, context).pipe(map(r => r.body));\n  }\n  /**\r\n   * Path part for operation bookFlight\r\n   */\n\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `bookFlight$Plain()` instead.\r\n   *\r\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\r\n   */\n  bookFlight$Plain$Response(params, context) {\n    const rb = new RequestBuilder(this.rootUrl, FlightService.BookFlightPath, 'post');\n    if (params) {\n      rb.body(params.body, 'application/*+json');\n    }\n    return this.http.request(rb.build({\n      responseType: 'text',\n      accept: 'text/plain',\n      context: context\n    })).pipe(filter(r => r instanceof HttpResponse), map(r => {\n      return r;\n    }));\n  }\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `bookFlight$Plain$Response()` instead.\r\n   *\r\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\r\n   */\n  bookFlight$Plain(params, context) {\n    return this.bookFlight$Plain$Response(params, context).pipe(map(r => r.body));\n  }\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `bookFlight()` instead.\r\n   *\r\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\r\n   */\n  bookFlight$Response(params, context) {\n    const rb = new RequestBuilder(this.rootUrl, FlightService.BookFlightPath, 'post');\n    if (params) {\n      rb.body(params.body, 'application/*+json');\n    }\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'text/json',\n      context: context\n    })).pipe(filter(r => r instanceof HttpResponse), map(r => {\n      return r;\n    }));\n  }\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `bookFlight$Response()` instead.\r\n   *\r\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\r\n   */\n  bookFlight(params, context) {\n    return this.bookFlight$Response(params, context).pipe(map(r => r.body));\n  }\n  /**\r\n   * Path part for operation findFlight\r\n   */\n\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `findFlight$Plain()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\n  findFlight$Plain$Response(params, context) {\n    const rb = new RequestBuilder(this.rootUrl, FlightService.FindFlightPath, 'get');\n    if (params) {\n      rb.path('id', params.id, {});\n    }\n    return this.http.request(rb.build({\n      responseType: 'text',\n      accept: 'text/plain',\n      context: context\n    })).pipe(filter(r => r instanceof HttpResponse), map(r => {\n      return r;\n    }));\n  }\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `findFlight$Plain$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\n  findFlight$Plain(params, context) {\n    return this.findFlight$Plain$Response(params, context).pipe(map(r => r.body));\n  }\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `findFlight()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\n  findFlight$Response(params, context) {\n    const rb = new RequestBuilder(this.rootUrl, FlightService.FindFlightPath, 'get');\n    if (params) {\n      rb.path('id', params.id, {});\n    }\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'text/json',\n      context: context\n    })).pipe(filter(r => r instanceof HttpResponse), map(r => {\n      return r;\n    }));\n  }\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `findFlight$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\n  findFlight(params, context) {\n    return this.findFlight$Response(params, context).pipe(map(r => r.body));\n  }\n}\nFlightService.SearchFlightPath = '/Flight';\nFlightService.BookFlightPath = '/Flight';\nFlightService.FindFlightPath = '/Flight/{id}';\nFlightService.ɵfac = function FlightService_Factory(t) {\n  return new (t || FlightService)(i0.ɵɵinject(i1.ApiConfiguration), i0.ɵɵinject(i2.HttpClient));\n};\nFlightService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: FlightService,\n  factory: FlightService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["HttpResponse","BaseService","RequestBuilder","map","filter","FlightService","constructor","config","http","searchFlight$Plain$Response","params","context","rb","rootUrl","SearchFlightPath","request","build","responseType","accept","pipe","r","searchFlight$Plain","body","searchFlight$Response","searchFlight","bookFlight$Plain$Response","BookFlightPath","bookFlight$Plain","bookFlight$Response","bookFlight","findFlight$Plain$Response","FindFlightPath","path","id","findFlight$Plain","findFlight$Response","findFlight","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Stefan\\source\\repos\\FirstAngularProject\\FirstAngularProject\\ClientApp\\src\\app\\api\\services\\flight.service.ts"],"sourcesContent":["/* tslint:disable */\r\n/* eslint-disable */\r\nimport { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpResponse, HttpContext } from '@angular/common/http';\r\nimport { BaseService } from '../base-service';\r\nimport { ApiConfiguration } from '../api-configuration';\r\nimport { StrictHttpResponse } from '../strict-http-response';\r\nimport { RequestBuilder } from '../request-builder';\r\nimport { Observable } from 'rxjs';\r\nimport { map, filter } from 'rxjs/operators';\r\n\r\nimport { BookDto } from '../models/book-dto';\r\nimport { FlightRm } from '../models/flight-rm';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class FlightService extends BaseService {\r\n  constructor(\r\n    config: ApiConfiguration,\r\n    http: HttpClient\r\n  ) {\r\n    super(config, http);\r\n  }\r\n\r\n  /**\r\n   * Path part for operation searchFlight\r\n   */\r\n  static readonly SearchFlightPath = '/Flight';\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `searchFlight$Plain()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  searchFlight$Plain$Response(params?: {\r\n  },\r\n  context?: HttpContext\r\n\r\n): Observable<StrictHttpResponse<FlightRm>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, FlightService.SearchFlightPath, 'get');\r\n    if (params) {\r\n    }\r\n\r\n    return this.http.request(rb.build({\r\n      responseType: 'text',\r\n      accept: 'text/plain',\r\n      context: context\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<FlightRm>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `searchFlight$Plain$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  searchFlight$Plain(params?: {\r\n  },\r\n  context?: HttpContext\r\n\r\n): Observable<FlightRm> {\r\n\r\n    return this.searchFlight$Plain$Response(params,context).pipe(\r\n      map((r: StrictHttpResponse<FlightRm>) => r.body as FlightRm)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `searchFlight()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  searchFlight$Response(params?: {\r\n  },\r\n  context?: HttpContext\r\n\r\n): Observable<StrictHttpResponse<FlightRm>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, FlightService.SearchFlightPath, 'get');\r\n    if (params) {\r\n    }\r\n\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'text/json',\r\n      context: context\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<FlightRm>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `searchFlight$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  searchFlight(params?: {\r\n  },\r\n  context?: HttpContext\r\n\r\n): Observable<FlightRm> {\r\n\r\n    return this.searchFlight$Response(params,context).pipe(\r\n      map((r: StrictHttpResponse<FlightRm>) => r.body as FlightRm)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation bookFlight\r\n   */\r\n  static readonly BookFlightPath = '/Flight';\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `bookFlight$Plain()` instead.\r\n   *\r\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\r\n   */\r\n  bookFlight$Plain$Response(params?: {\r\n    body?: BookDto\r\n  },\r\n  context?: HttpContext\r\n\r\n): Observable<StrictHttpResponse<FlightRm>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, FlightService.BookFlightPath, 'post');\r\n    if (params) {\r\n      rb.body(params.body, 'application/*+json');\r\n    }\r\n\r\n    return this.http.request(rb.build({\r\n      responseType: 'text',\r\n      accept: 'text/plain',\r\n      context: context\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<FlightRm>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `bookFlight$Plain$Response()` instead.\r\n   *\r\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\r\n   */\r\n  bookFlight$Plain(params?: {\r\n    body?: BookDto\r\n  },\r\n  context?: HttpContext\r\n\r\n): Observable<FlightRm> {\r\n\r\n    return this.bookFlight$Plain$Response(params,context).pipe(\r\n      map((r: StrictHttpResponse<FlightRm>) => r.body as FlightRm)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `bookFlight()` instead.\r\n   *\r\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\r\n   */\r\n  bookFlight$Response(params?: {\r\n    body?: BookDto\r\n  },\r\n  context?: HttpContext\r\n\r\n): Observable<StrictHttpResponse<FlightRm>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, FlightService.BookFlightPath, 'post');\r\n    if (params) {\r\n      rb.body(params.body, 'application/*+json');\r\n    }\r\n\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'text/json',\r\n      context: context\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<FlightRm>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `bookFlight$Response()` instead.\r\n   *\r\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\r\n   */\r\n  bookFlight(params?: {\r\n    body?: BookDto\r\n  },\r\n  context?: HttpContext\r\n\r\n): Observable<FlightRm> {\r\n\r\n    return this.bookFlight$Response(params,context).pipe(\r\n      map((r: StrictHttpResponse<FlightRm>) => r.body as FlightRm)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation findFlight\r\n   */\r\n  static readonly FindFlightPath = '/Flight/{id}';\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `findFlight$Plain()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  findFlight$Plain$Response(params: {\r\n    id: string;\r\n  },\r\n  context?: HttpContext\r\n\r\n): Observable<StrictHttpResponse<FlightRm>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, FlightService.FindFlightPath, 'get');\r\n    if (params) {\r\n      rb.path('id', params.id, {});\r\n    }\r\n\r\n    return this.http.request(rb.build({\r\n      responseType: 'text',\r\n      accept: 'text/plain',\r\n      context: context\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<FlightRm>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `findFlight$Plain$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  findFlight$Plain(params: {\r\n    id: string;\r\n  },\r\n  context?: HttpContext\r\n\r\n): Observable<FlightRm> {\r\n\r\n    return this.findFlight$Plain$Response(params,context).pipe(\r\n      map((r: StrictHttpResponse<FlightRm>) => r.body as FlightRm)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `findFlight()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  findFlight$Response(params: {\r\n    id: string;\r\n  },\r\n  context?: HttpContext\r\n\r\n): Observable<StrictHttpResponse<FlightRm>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, FlightService.FindFlightPath, 'get');\r\n    if (params) {\r\n      rb.path('id', params.id, {});\r\n    }\r\n\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'text/json',\r\n      context: context\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<FlightRm>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `findFlight$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  findFlight(params: {\r\n    id: string;\r\n  },\r\n  context?: HttpContext\r\n\r\n): Observable<FlightRm> {\r\n\r\n    return this.findFlight$Response(params,context).pipe(\r\n      map((r: StrictHttpResponse<FlightRm>) => r.body as FlightRm)\r\n    );\r\n  }\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}