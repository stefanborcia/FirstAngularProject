{"ast":null,"code":"import { HttpResponse } from '@angular/common/http';\nimport { BaseService } from '../base-service';\nimport { RequestBuilder } from '../request-builder';\nimport { map, filter } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../api-configuration\";\nimport * as i2 from \"@angular/common/http\";\nexport class PassengerService extends BaseService {\n  constructor(config, http) {\n    super(config, http);\n  }\n  /**\r\n   * Path part for operation registerPassenger\r\n   */\n\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `registerPassenger()` instead.\r\n   *\r\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\r\n   */\n  registerPassenger$Response(params, context) {\n    const rb = new RequestBuilder(this.rootUrl, PassengerService.RegisterPassengerPath, 'post');\n    if (params) {\n      rb.body(params.body, 'application/*+json');\n    }\n    return this.http.request(rb.build({\n      responseType: 'text',\n      accept: '*/*',\n      context: context\n    })).pipe(filter(r => r instanceof HttpResponse), map(r => {\n      return r.clone({\n        body: undefined\n      });\n    }));\n  }\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `registerPassenger$Response()` instead.\r\n   *\r\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\r\n   */\n  registerPassenger(params, context) {\n    return this.registerPassenger$Response(params, context).pipe(map(r => r.body));\n  }\n}\nPassengerService.RegisterPassengerPath = '/Passenger';\nPassengerService.ɵfac = function PassengerService_Factory(t) {\n  return new (t || PassengerService)(i0.ɵɵinject(i1.ApiConfiguration), i0.ɵɵinject(i2.HttpClient));\n};\nPassengerService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: PassengerService,\n  factory: PassengerService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAGA,SAAqBA,YAAY,QAAqB,sBAAsB;AAC5E,SAASC,WAAW,QAAQ,iBAAiB;AAG7C,SAASC,cAAc,QAAQ,oBAAoB;AAEnD,SAASC,GAAG,EAAEC,MAAM,QAAQ,gBAAgB;;;;AAO5C,OAAM,MAAOC,gBAAiB,SAAQJ,WAAW;EAC/CK,YACEC,MAAwB,EACxBC,IAAgB;IAEhB,KAAK,CAACD,MAAM,EAAEC,IAAI,CAAC;EACrB;EAEA;;;;EAKA;;;;;;EAMAC,0BAA0B,CAACC,MAE1B,EACDC,OAAqB;IAInB,MAAMC,EAAE,GAAG,IAAIV,cAAc,CAAC,IAAI,CAACW,OAAO,EAAER,gBAAgB,CAACS,qBAAqB,EAAE,MAAM,CAAC;IAC3F,IAAIJ,MAAM,EAAE;MACVE,EAAE,CAACG,IAAI,CAACL,MAAM,CAACK,IAAI,EAAE,oBAAoB,CAAC;;IAG5C,OAAO,IAAI,CAACP,IAAI,CAACQ,OAAO,CAACJ,EAAE,CAACK,KAAK,CAAC;MAChCC,YAAY,EAAE,MAAM;MACpBC,MAAM,EAAE,KAAK;MACbR,OAAO,EAAEA;KACV,CAAC,CAAC,CAACS,IAAI,CACNhB,MAAM,CAAEiB,CAAM,IAAKA,CAAC,YAAYrB,YAAY,CAAC,EAC7CG,GAAG,CAAEkB,CAAoB,IAAI;MAC3B,OAAQA,CAAuB,CAACC,KAAK,CAAC;QAAEP,IAAI,EAAEQ;MAAS,CAAE,CAA6B;IACxF,CAAC,CAAC,CACH;EACH;EAEA;;;;;;EAMAC,iBAAiB,CAACd,MAEjB,EACDC,OAAqB;IAInB,OAAO,IAAI,CAACF,0BAA0B,CAACC,MAAM,EAACC,OAAO,CAAC,CAACS,IAAI,CACzDjB,GAAG,CAAEkB,CAA2B,IAAKA,CAAC,CAACN,IAAY,CAAC,CACrD;EACH;;AA3DWV,gBAAiB,CAWZS,qBAAqB,GAAG,YAAY;AAXzCT,gBAAiB;mBAAjBA,gBAAgB;AAAA;AAAhBA,gBAAiB;SAAjBA,gBAAgB;EAAAoB,SAAhBpB,gBAAgB;EAAAqB,YAFf;AAAM","names":["HttpResponse","BaseService","RequestBuilder","map","filter","PassengerService","constructor","config","http","registerPassenger$Response","params","context","rb","rootUrl","RegisterPassengerPath","body","request","build","responseType","accept","pipe","r","clone","undefined","registerPassenger","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Stefan\\source\\repos\\FirstAngularProject\\FirstAngularProject\\ClientApp\\src\\app\\api\\services\\passenger.service.ts"],"sourcesContent":["/* tslint:disable */\r\n/* eslint-disable */\r\nimport { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpResponse, HttpContext } from '@angular/common/http';\r\nimport { BaseService } from '../base-service';\r\nimport { ApiConfiguration } from '../api-configuration';\r\nimport { StrictHttpResponse } from '../strict-http-response';\r\nimport { RequestBuilder } from '../request-builder';\r\nimport { Observable } from 'rxjs';\r\nimport { map, filter } from 'rxjs/operators';\r\n\r\nimport { NewPassengerDto } from '../models/new-passenger-dto';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class PassengerService extends BaseService {\r\n  constructor(\r\n    config: ApiConfiguration,\r\n    http: HttpClient\r\n  ) {\r\n    super(config, http);\r\n  }\r\n\r\n  /**\r\n   * Path part for operation registerPassenger\r\n   */\r\n  static readonly RegisterPassengerPath = '/Passenger';\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `registerPassenger()` instead.\r\n   *\r\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\r\n   */\r\n  registerPassenger$Response(params?: {\r\n    body?: NewPassengerDto\r\n  },\r\n  context?: HttpContext\r\n\r\n): Observable<StrictHttpResponse<void>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, PassengerService.RegisterPassengerPath, 'post');\r\n    if (params) {\r\n      rb.body(params.body, 'application/*+json');\r\n    }\r\n\r\n    return this.http.request(rb.build({\r\n      responseType: 'text',\r\n      accept: '*/*',\r\n      context: context\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `registerPassenger$Response()` instead.\r\n   *\r\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\r\n   */\r\n  registerPassenger(params?: {\r\n    body?: NewPassengerDto\r\n  },\r\n  context?: HttpContext\r\n\r\n): Observable<void> {\r\n\r\n    return this.registerPassenger$Response(params,context).pipe(\r\n      map((r: StrictHttpResponse<void>) => r.body as void)\r\n    );\r\n  }\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}